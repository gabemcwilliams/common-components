"""
Vault TLS Profile Setup Script

This script loads a certificate configuration YAML file generated by the
`create_multi_user_certificates.py` script and uses it to configure an
authenticated TLS client certificate profile in HashiCorp Vault.

Functionality:
- Parses CLI arguments to locate the output config directory
- Searches for a YAML file matching '*_output_config.yaml'
- Loads CA, server, and certificate metadata
- Authenticates with a Vault instance using environment variables:
    - VAULT_ADDR
    - VAULT_TOKEN
    - VAULT_CACERT
- Enables Vault certificate authentication (if not already enabled)
- Uploads a client certificate to Vault under a named profile
- Dynamically creates or updates a Vault policy with read/list capabilities
  for the associated secret path

Environment Variables:
- `VAULT_ADDR`: Vault server URL (default: http://127.0.0.1:8200)
- `VAULT_TOKEN`: Vault authentication token
- `VAULT_CACERT`: Path to the Vault server's CA certificate (optional)

YAML Configuration File Format:
The config file must include keys for:
- `metadata`: contains `profile_name`, `container_folder`, `export_dir`, etc.
- `certificates`: paths to certificates and keys
- `ca` and `server`: certificate metadata (optional but expected)

Example CLI Usage:
    python setup_tls_profile.py --config_dir D:/certs/example

Raises:
- FileNotFoundError if config file or certs are missing
- ValueError if Vault authentication fails
- KeyError if required config keys are missing
"""

import os

import hvac
import yaml
import argparse
from pathlib import Path
from colorama import Fore, Style

# ============================
# CONFIGURATION & CLI ARGUMENTS
# ============================

parser = argparse.ArgumentParser(
    description="Create vault profile using output yaml from 'create_multi_user_certificates.py.")
parser.add_argument("--config_dir", default="D:/certs/example", type=str, help="Directory where output YAML is stored")
args = parser.parse_args()


# ============================
# FIND OUTPUT YAML FILE
# ============================

def find_yaml_file(config_dir: str) -> Path:
    """Finds the first YAML file ending in '_output_config.yaml'."""
    config_path = Path(config_dir)

    if not config_path.exists():
        raise FileNotFoundError(f"Config directory does not exist: {config_dir}")

    yaml_files = list(config_path.glob("*_output_config.yaml"))

    if not yaml_files:
        raise FileNotFoundError(f"No '_output_config.yaml' file found in: {config_dir}")

    return yaml_files[0]  # Return the first matching file


# Locate YAML file dynamically
YAML_FILE = find_yaml_file(args.config_dir)

print(f"Using configuration file: {YAML_FILE}")


# ============================
# LOAD YAML CONFIGURATION
# ============================

def load_yaml(file_path: Path) -> dict:
    """Loads the YAML config file."""
    if file_path.exists():
        with open(file_path, "r", encoding="utf-8") as y_file:
            return yaml.safe_load(y_file) or {}
    raise FileNotFoundError(f"YAML configuration file not found: {file_path}")


config = load_yaml(YAML_FILE)

# Extract metadata
metadata = config.get("metadata", {})
PROFILE_NAME = metadata.get("profile_name", "default_profile")
CONTAINER_FOLDER = Path(metadata.get("container_folder", args.config_dir))
EXPORT_DIR = Path(metadata.get("export_dir", "D:/certs"))
CONFIG_FILE = metadata.get("config_file", "example.yaml")
FORCE_REGENERATION = metadata.get("force_regeneration", False)

# Extract CA, Server, and Certificates info
ca_config = config.get("ca", {})
server_config = config.get("server", {})
certificates = config.get("certificates", {})

# Extract certificate paths
CA_CERT_FILE = Path(certificates.get("ca_cert", ""))
PUBLIC_CERT_FILE = Path(certificates.get("server_cert", ""))
SERVER_KEY_FILE = Path(certificates.get("server_key", ""))
SSH_KEY_FILE = Path(certificates.get("ssh_key", ""))
SSH_PUBLIC_KEY_FILE = Path(certificates.get("ssh_public_key", ""))

# ============================
# VAULT CONFIGURATION
# ============================

VAULT_ADDR = os.environ.get("VAULT_ADDR", "http://127.0.0.1:8200")  # Change this to match your Vault server
VAULT_TOKEN = os.environ.get("VAULT_TOKEN", "your-root-token")  # Replace with actual Vault token
VAULT_CACERT = os.environ.get("VAULT_CACERT", "example.crt")

# Prefect Vault Authentication Profile
POLICY_NAME = f"{PROFILE_NAME}".lower().strip()  # Policy based on profile name

print('POLICY_NAME', POLICY_NAME)

# Policy definition
POLICY = f"""
path "secret/data/{PROFILE_NAME}/*" {{
  capabilities = ["read", "list"]
}}
"""


# ============================
# FUNCTION DEFINITIONS
# ============================

def get_client() -> hvac.Client:
    """Initialize and authenticate the Vault client."""
    hvac_client = hvac.Client(
        url=VAULT_ADDR,
        token=VAULT_TOKEN,
        verify=VAULT_CACERT
    )

    if not hvac_client.is_authenticated():
        raise ValueError("Vault authentication failed. Please check your VAULT_TOKEN.")

    print(
        f" * {Fore.LIGHTYELLOW_EX}Vault Client{Style.RESET_ALL} is {Fore.GREEN}[AUTHENTICATED]{Style.RESET_ALL}: {hvac_client.is_authenticated()}"
    )

    return hvac_client


# ============================
# MAIN SCRIPT EXECUTION
# ============================

client = get_client()

# Check Vault authentication
if not client.is_authenticated():
    print("Vault authentication failed. Check your token.")
    exit(1)

print("Vault authenticated successfully.")

# Ensure certificate authentication is enabled
auth_methods = client.sys.list_auth_methods()
if "cert/" not in auth_methods:
    client.sys.enable_auth_method("cert")
    print("Certificate authentication enabled.")
else:
    print("Certificate authentication is already enabled.")

# Upload the client certificate for authentication
if PUBLIC_CERT_FILE.exists():
    with open(PUBLIC_CERT_FILE, "r") as f:
        public_cert = f.read()

    client.write(
        f"auth/cert/certs/{PROFILE_NAME}",  # Correctly storing the client profile
        display_name=PROFILE_NAME,
        policies=[POLICY_NAME],
        certificate=public_cert
    )
    print(f"TLS profile '{PROFILE_NAME}' created and linked to policy '{POLICY_NAME}'.")
else:
    print(f"Public certificate file not found: {PUBLIC_CERT_FILE}")

# Create or update the Vault policy
client.sys.create_or_update_policy(name=POLICY_NAME, policy=POLICY)
print(f"Policy '{POLICY_NAME}' created.")

# Register Prefect TLS authentication profile
client.write(
    f"auth/cert/certs/{PROFILE_NAME}",
    display_name=PROFILE_NAME,
    policies=[POLICY_NAME],
    certificate=public_cert
)
print(f"TLS profile '{PROFILE_NAME}' created and linked to policy '{POLICY_NAME}'.")
